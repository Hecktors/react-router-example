{"version":3,"sources":["Nav.js","Home.js","About.js","Shop.js","Article.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","Home","About","Shop","state","articles","fetch","response","json","this","setState","slice","length","map","article","key","id","src","thumbnailUrl","alt","title","React","Component","Article","props","match","params","url","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAkBeA,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,6BACE,yBAAKA,UAAU,QAAO,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACtB,4BACE,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,aCACC,MARf,WACE,OACE,yBAAKF,UAAU,QACb,sCCKSG,MARf,WACE,OACE,yBAAKH,UAAU,SACb,uC,wDCoCSI,E,YArCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,SAAU,IAHA,E,qLAOWC,MAAM,gD,cAAvBC,E,0BACiBA,EAASC,Q,OAA1BH,E,OACNI,KAAKC,SAAS,CAAEL,SAAUA,EAASM,MAAM,EAAE,M,gFAK3C,OAA2B,IADNF,KAAKL,MAAlBC,SACQO,OAAe,aAE7B,yBAAKb,UAAU,QACb,oCACA,4BAGIU,KAAKL,MAAMC,SAASQ,KAAI,SAAAC,GAAO,OAC/B,wBAAIC,IAAKD,EAAQE,IAEb,kBAAC,IAAD,CAAMhB,GAAE,gBAAWc,EAAQE,KACzB,yBAAKC,IAAKH,EAAQI,aAAcC,IAAI,UACnCL,EAAQM,iB,GA3BRC,IAAMC,WCsBVC,E,YAtBb,aAAe,IAAD,8BACZ,+CACKnB,MAAQ,CACXU,QAAS,IAHC,E,qLAOWR,MAAM,+CAAD,OAAgDG,KAAKe,MAAMC,MAAMC,OAAOV,M,cAA9FT,E,0BACgBA,EAASC,Q,OAAzBM,E,OACNL,KAAKC,SAAS,CAAEI,Y,gFAGR,IACAA,EAAYL,KAAKL,MAAjBU,QACR,OAAQA,EAAQE,GACd,yBAAKjB,UAAU,WACb,+CAAiBe,EAAQM,QACzB,yBAAKH,IAAKH,EAAQa,IAAKR,IAAI,aAHV,iB,GAfHE,IAAMC,W,OCyBbM,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,QACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,KAAK,IAAIC,OAAK,EAACC,UAAW9B,IACjC,kBAAC,IAAD,CAAO4B,KAAK,SAASE,UAAW7B,IAChC,kBAAC,IAAD,CAAO2B,KAAK,QAAQC,OAAK,EAACC,UAAW5B,IACrC,kBAAC,IAAD,CAAO0B,KAAK,YAAYE,UAAWR,SCR3BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCZNW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5a964dad.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom'\n\nfunction Nav() {\n  return (\n    <div className=\"Nav\">\n      <nav>\n        <div className=\"logo\"><Link to='/'>Home</Link></div>\n        <ul>\n          <li><Link to='/about'>About</Link></li>\n          <li><Link to='/shop'>Shop</Link></li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n      <h1>Home</h1>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\n\nfunction About() {\n  return (\n    <div className=\"About\">\n      <h1>About</h1>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom'\n\nclass Shop extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      articles: []\n    }\n  }\n  async componentDidMount() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/photos')\n    const articles = await response.json()\n    this.setState({ articles: articles.slice(0,20) })      \n  }\n\n  render() {\n    const { articles } = this.state\n    return articles.length === 0 ? 'Loading...' :\n    (\n      <div className=\"Shop\">\n        <h1>Shop</h1>\n        <ul>\n          {\n            \n            this.state.articles.map(article => (\n            <li key={article.id}>\n\n                <Link to={`/shop/${article.id}`}>\n                  <img src={article.thumbnailUrl} alt=\"album\"/>\n                  {article.title}\n                  </Link>\n              </li>)\n            )\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Shop;\n","import React from 'react';\nimport './App.css';\n\nclass Article extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      article: {}\n    }\n  }\n  async componentDidMount() {\n    const response = await fetch(`https://jsonplaceholder.typicode.com/photos/${this.props.match.params.id}`)\n    const article = await response.json()\n    this.setState({ article })\n  }\n\n  render() {\n    const { article } = this.state\n    return !article.id ? 'Loading...' :\n      <div className=\"Article\">\n        <h1>{`Article: ${article.title}`}</h1>\n        <img src={article.url} alt=\"article\"/>\n      </div>\n  }\n}\n\nexport default Article;\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav'\nimport Home from './Home'\nimport About from './About'\nimport Shop from './Shop'\nimport Article from './Article'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <main className=\"main\">\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/about' component={About} />\n            <Route path='/shop' exact component={Shop} />\n            <Route path='/shop/:id' component={Article} />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}